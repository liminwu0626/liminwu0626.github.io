<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>念君的个人站点</title>
  <subtitle>生命的意义，不在于追求什么，而在于我们是不是永远在追求的路上。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.liminwu.me/"/>
  <updated>2017-04-10T08:45:54.000Z</updated>
  <id>http://www.liminwu.me/</id>
  
  <author>
    <name>limin wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 读写CSV文件</title>
    <link href="http://www.liminwu.me/2017/04/10/Android%20%E8%AF%BB%E5%86%99CSV%E6%96%87%E4%BB%B6/"/>
    <id>http://www.liminwu.me/2017/04/10/Android 读写CSV文件/</id>
    <published>2017-04-10T06:20:21.000Z</published>
    <updated>2017-04-10T08:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求背景："><a href="#需求背景：" class="headerlink" title="需求背景："></a>需求背景：</h2><p>   最近在做项目过程中，有以下需求：将用户的交易数据写入到本地文件中，并保存为.csv文件格式，以便导出时供用户查看。</p>
<h2 id="何为-csv文件？"><a href="#何为-csv文件？" class="headerlink" title="何为.csv文件？"></a>何为.csv文件？</h2><p>   csv文件是以逗号分割的数据仓储，读取数据时从每一行中读取一条数据元祖，也就是一条数据，再用字符分割的方式获取表中的每一个数据项。</p>
<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p>   首先来简单说下 Android 的文件读写。说到文件的存储，就要涉及到内部存储（internal storage）和外部存储（external storage）。</p>
<h3 id="内部存储："><a href="#内部存储：" class="headerlink" title="内部存储："></a>内部存储：</h3><p>   注意内部存储不是内存。内部存储位于系统中很特殊的一个位置，如果你想将文件存储于内部存储中，那么文件默认只能被你的应用访问到，且一个应用所创建的所有文件都在和应用包名相同的目录下。也就是说应用创建于内部存储的文件，与这个应用是关联起来的。<strong>当一个应用卸载之后，内部存储中的这些文件也被删除</strong>。从技术上来讲如果你在创建内部存储文件的时候将文件属性设置成可读，其他app能够访问自己应用的数据，前提是他知道你这个应用的包名，如果一个文件的属性是私有（private），那么即使知道包名其他应用也无法访问。 内部存储空间十分有限，因而显得可贵，另外，它也是系统本身和系统应用程序主要的数据存储所在地，一旦内部存储空间耗尽，手机也就无法使用了。所以对于内部存储空间，我们要尽量避免使用。Shared Preferences和SQLite数据库都是存储在内部存储空间上的。内部存储一般用Context来获取和操作。<br>   getFilesDir()获取app的内部存储空间，相当于应用在内部存储上的根目录。<br>   如果是要创建一个文件，如下：<br>   <img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-150933@2x.png" alt="img"><br>   Android 为我们提供了一个简便方法’openFileOutput()’来读写应用在内部存储空间上的文件，下面是向文件中写入文件的例子：<br>   <img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-152021@2x.png" alt="img"><br>   总结一下文件相关操作，可以得出以下三个特点：</p>
<ul>
<li>1 文件操作只需要向函数提供文件名，所以程序自己只需要维护文件名即可。</li>
<li>2 不用自己去创建文件对象和输入、输出流，提供文件名就可以返回File对象或输入输出流。</li>
<li><p>3 对于路径操作返回的都是文件对象。</p>
<h3 id="外部存储"><a href="#外部存储" class="headerlink" title="外部存储"></a>外部存储</h3><p>最容易混淆的是外部存储，如果说 PC 上也要区分出外部存储和内部存储的话，那么自带的硬盘算是内部存储，U盘或者移动硬盘算是外部存储，因此我们很容易带着这样的理解去看待安卓手机，认为机身固有存储是内部存储，而扩展的 T 卡是外部存储。比如我们任务 16GB 版本的 Nexus 4有 16G 的内部存储，普通消费者可以这样理解，但是安卓的编程中不能，这 16GB 仍然是外部存储。</p>
<p>所有的安卓设备都有外部存储和内部存储，这两个名称来源于安卓的早期设备，那个时候的设备内部存储确实是固定的，而外部存储确实是可以像U盘一样移动的。但是在后来的设备中，很多中高端机器都将自己的机身存储扩展到了 8G 以上，他们将存储在概念上分成了”内部internal” 和”外部external” 两部分，但其实都在手机内部。所以不管安卓手机是否有可移动的sdcard，他们总是有外部存储和内部存储。最关键的是，我们都是通过相同的api来访问可移动的sdcard或者手机自带的存储（外部存储）。</p>
<p>外部存储中的文件是可以被用户或者其他应用程序修改的，有两种类型的文件（或者目录）：</p>
</li>
<li><p>公共文件Public files：文件是可以被自由访问，且文件的数据对其他应用或者用户来说都是由意义的，当应用被卸载之后，其卸载前创建的文件仍然保留。比如camera应用，生成的照片大家都能访问，而且camera不在了，照片仍然在。<br>如果想在外存储上放公共文件你可以使用getExternalStoragePublicDirectory()</p>
</li>
<li><p>私有文件Private files：其实由于是外部存储的原因即是是这种类型的文件也能被其他程序访问，只不过一个应用私有的文件对其他应用其实是没有访问价值的（恶意程序除外）。外部存储上，应用私有文件的价值在于卸载之后，这些文件也会被删除。类似于内部存储。<br>创建应用私有文件的方法是Context.getExternalFilesDir()。所有应用程序的外部存储的私有文件都放在根目录的Android/data/下，目录形式为/Android/data/<package_name>/</package_name></p>
<h3 id="getFilesDir，getExternalFilesDir，getExternalStorageDirectory-，getExternalStoragePublicDirectory"><a href="#getFilesDir，getExternalFilesDir，getExternalStorageDirectory-，getExternalStoragePublicDirectory" class="headerlink" title="getFilesDir，getExternalFilesDir，getExternalStorageDirectory ，getExternalStoragePublicDirectory"></a>getFilesDir，getExternalFilesDir，getExternalStorageDirectory ，getExternalStoragePublicDirectory</h3><p>最后为了弄清楚getFilesDir，getExternalFilesDir，getExternalStorageDirectory，getExternalStoragePublicDirectory等android文件操作方法，我将这些方法的执行结果打印出来，看看到底路径是啥样，在activity中执行以下代码：<br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-154228@2x.png" alt="img"><br>在log中看到如下结果：<br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-154018@2x.png" alt="img"><br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-154120@2x.png" alt="img"><br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-154054@2x.png" alt="img"><br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-154149@2x.png" alt="img"></p>
<h2 id="csv-文件的读写"><a href="#csv-文件的读写" class="headerlink" title=".csv 文件的读写"></a>.csv 文件的读写</h2><ul>
<li>1 将.csv文件写入到内存<br>项目需求是在进行充值交易时，为了看到交易前与交易后数据是否成功，所以在交易前先将一些可知的请求参数写入文件当中，首先在主 Activity 中编写以下代码:<br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-155640@2x.png" alt="img"><br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-155824@2x.png" alt="img"><br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-155848@2x.png" alt="img"><br>然后将表头数据写入’buffer.append(“交易批次,交易序号,客户名,身份证号,卡号,交易流水,交易原金额,交易金额,交易后金额,交易时间,交易是否成功,是否超时\r\n”);’<br>等交易成功后，再将请求响应获得的数据，追加到上面写入的文件末尾，代码如下：<br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-160543@2x.png" alt="img"><br>至此，我们已经将.csv格式的文件写入到本地，预览效果如下：<br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-161154@2x.png" alt="img"></li>
<li>2 读完.csv文件显示到界面上<br>用户在APP交易明细查询中需要显示出文件中保存的数据，所以我们还需要将保存到.csv文件中的内容显示到界面上。代码如下:<br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-161555@2x.png" alt="img"><br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-161618@2x.png" alt="img"><br>在读取.csv格式的文件中，用到了第三方解析工具javacsv.jar，可以在网上自行搜索下载到，<br>工具类代码如下:<br><img src="http://ome4apvpf.bkt.clouddn.com/WX20170410-162148@2x.png" alt="img"></li>
</ul>
<p>参考:「android中的文件操作详解以及内部存储和外部存储」<br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2013/0923/1557.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2013/0923/1557.html</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求背景：&quot;&gt;&lt;a href=&quot;#需求背景：&quot; class=&quot;headerlink&quot; title=&quot;需求背景：&quot;&gt;&lt;/a&gt;需求背景：&lt;/h2&gt;&lt;p&gt;   最近在做项目过程中，有以下需求：将用户的交易数据写入到本地文件中，并保存为.csv文件格式，以便导出时供用户查
    
    </summary>
    
    
      <category term="Android" scheme="http://www.liminwu.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Mac安装Homebrew</title>
    <link href="http://www.liminwu.me/2017/03/13/Mac%E5%AE%89%E8%A3%85Homebrew/"/>
    <id>http://www.liminwu.me/2017/03/13/Mac安装Homebrew/</id>
    <published>2017-03-12T16:23:57.000Z</published>
    <updated>2017-04-10T06:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac安装Homebrew"><a href="#Mac安装Homebrew" class="headerlink" title="Mac安装Homebrew"></a>Mac安装Homebrew</h1><p>brew 全称Homebrew  是Mac OSX上的软件包管理工具<br>Homebrew 安装和卸载工具 只用一行命令就能完成<br>官方地址:    <a href="http://brew.sh/index.html" target="_blank" rel="external">http://brew.sh/index.html</a><br>mac 自带ruby<br>打开命令行  terminal<br>输入  :</p>
<ol>
<li>ruby -version<br>命令行输出:<br><img src="http://ome4apvpf.bkt.clouddn.com/17-3-13/32933292-file_1489336308768_426.png" alt="img"><h3 id="1-安装命令"><a href="#1-安装命令" class="headerlink" title="1) 安装命令"></a>1) 安装命令</h3></li>
<li>ruby -e “$(curl -fsSL <a href="https://raw.github.com/Homebrew/homebrew/go/install" target="_blank" rel="external">https://raw.github.com/Homebrew/homebrew/go/install</a>)”<br>假如已经安装了  输入如下命令</li>
<li>ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install" target="_blank" rel="external">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)”<br>命令行输出:<br><img src="http://ome4apvpf.bkt.clouddn.com/17-3-13/3446560-file_1489336480805_10e6d.png" alt="img"><h3 id="2-brew-使用方法"><a href="#2-brew-使用方法" class="headerlink" title="2) brew 使用方法"></a>2) brew 使用方法</h3>命令行 输入:  brew<br>输出:<br><img src="http://ome4apvpf.bkt.clouddn.com/17-3-13/15237410-file_1489336625045_2046.png" alt="img"><h3 id="3-安装工具"><a href="#3-安装工具" class="headerlink" title="3) 安装工具"></a>3) 安装工具</h3>举个栗子:   Mongodb  这个工具<br>输入命令:   brew install Mongodb<br>如图:<br><img src="http://ome4apvpf.bkt.clouddn.com/17-3-13/8164777-file_1489336698870_11cd.png" alt="img"><h3 id="4-卸载"><a href="#4-卸载" class="headerlink" title="4)  卸载"></a>4)  卸载</h3>拿上面的栗子:   Mongodb 工具<br>输入命令    brew uninstall Mongodb<h3 id="5-工具安装的目录"><a href="#5-工具安装的目录" class="headerlink" title="5)  工具安装的目录"></a>5)  工具安装的目录</h3>Homebrew 会将套件安装到独立目录，并将文件软链接至/usr/local 。</li>
<li>$ cd /usr/local  </li>
<li>$ find Cellar  </li>
<li>Cellar/wget/1.16.1  </li>
<li>Cellar/wget/1.16.1/bin/wget  </li>
<li>Cellar/wget/1.16.1/share/man/man1/wget.1  </li>
<li>$ ls -l bin  </li>
<li>bin/wget -&gt; ../Cellar/wget/1.16.1/bin/wget<br>Homebrew 的所有文件均会被安装到预定义目录下，所以无需担心 Homebrew 的安装位置。<h3 id="6-其他命令"><a href="#6-其他命令" class="headerlink" title="6) 其他命令"></a>6) 其他命令</h3>brew list       列出已安装的软件<br>brew update     更新brew<br>brew home       用浏览器打开brew的官方网站<br>brew info       显示软件信息<br>brew deps        显示包依赖<br>更多命令请看:    <a href="https://git.io/brew-docs" target="_blank" rel="external">https://git.io/brew-docs</a><h3 id="7-安装过程中遇到的问题"><a href="#7-安装过程中遇到的问题" class="headerlink" title="7)安装过程中遇到的问题"></a>7)安装过程中遇到的问题</h3>brew安装应用的时候碰上“curl: (7) couldn’t connect to host 的问题”,可以使用代理，让curl通过代理来访问。编辑$HOME/.curlrc文件，增加“–socks5 127.0.0.1:1080”即可（替换成你自己的代理），这样你在brew install安装的时候，相应curl就会通过socks代理访问，从而成功下载完成安装。方便简单，就是你需要自己设置一个socks代理。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mac安装Homebrew&quot;&gt;&lt;a href=&quot;#Mac安装Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Mac安装Homebrew&quot;&gt;&lt;/a&gt;Mac安装Homebrew&lt;/h1&gt;&lt;p&gt;brew 全称Homebrew  是Mac OSX上
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.liminwu.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.liminwu.me/2017/01/17/hello-world/"/>
    <id>http://www.liminwu.me/2017/01/17/hello-world/</id>
    <published>2017-01-17T07:08:53.000Z</published>
    <updated>2017-01-17T07:08:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
