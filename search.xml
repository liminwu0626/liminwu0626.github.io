<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Android 读写 Excel文件]]></title>
      <url>%2Fpost%2FAndroid%20%E8%AF%BB%E5%86%99Excel%E6%96%87%E4%BB%B6.html</url>
      <content type="text"><![CDATA[Android 读写 Excel 文件 需求背景：最近在做项目过程中，需要读取 Excel 文件，Excel文件可以来自用户插在Android设备上的外接U盘，也可以是保存在项目Assets、 Raw里面。资料参考：查阅了很多相关资料，读取外接U盘主要用到了Android 读取USB文件的第三方开源库[GitHub]（https://github.com/magnusja/libaums）用到的Jar文件 Jar读写Asset Raw文件也可以用jxl.jar本文将从以下两个方面介绍Excel文件的读写 读写外接 U 盘文件 读写Android 项目内Assets Raw 下的 Excel 文件Android 读写 U 盘 Excel 文件 首先我们需要注册广播监听外接U盘的插入和拔出 拔出123456 IntentFilter usbDeviceStateFilter = new IntentFilter(); usbDeviceStateFilter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED); usbDeviceStateFilter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED); registerReceiver(mUsbReceiver, usbDeviceStateFilter); //注册监听自定义广播 IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);registerReceiver(mUsbReceiver, filter); 然后重写onReceive()方法 BroadcastReceiver mUsbReceiver = new BroadcastReceiver() &#123;1234567891011121314151617181920212223242526272829303132333435 public void onReceive(Context context, Intent intent) &#123; String action = intent.getAction(); switch (action) &#123; case ACTION_USB_PERMISSION://接受到自定义广播 UsbDevice usbDevice = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE); if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) &#123; //允许权限申请 if (usbDevice != null) &#123; //Do something readDevice(getUsbMass(usbDevice)); &#125; else &#123; &#125; &#125; else &#123; setMsg(&quot;用户未授权，读取失败&quot;); &#125; break; case UsbManager.ACTION_USB_DEVICE_ATTACHED://接收到存储设备插入广播 UsbDevice device_add = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE); if (device_add != null) &#123; redDeviceList(); &#125; else &#123; &#125; break; case UsbManager.ACTION_USB_DEVICE_DETACHED://接收到存储设备拔出广播 UsbDevice device_remove = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE); if (device_remove != null) &#123; usbFiles.clear();//清除 adapter.notifyDataSetChanged();//更新界面 cFolder = null; &#125; break; &#125; &#125;&#125;; 接收到有U盘插入之后我们要对U盘设备进行一些初始化相关的操作 void readDevice(UsbMassStorageDevice device) &#123;12345678910111213141516171819202122232425262728293031323334353637 // before interacting with a device you need to call init()! try &#123; device.init();//初始化// Only uses the first partition on the device Partition partition = device.getPartitions().get(0); FileSystem currentFs = partition.getFileSystem(); //fileSystem.getVolumeLabel()可以获取到设备的标识 //通过FileSystem可以获取当前U盘的一些存储信息，包括剩余空间大小，容量等等 // Log.d(TAG, &quot;Capacity: &quot; + currentFs.getCapacity()); // Log.d(TAG, &quot;Occupied Space: &quot; + currentFs.getOccupiedSpace()); // Log.d(TAG, &quot;Free Space: &quot; + currentFs.getFreeSpace()); // Log.d(TAG, &quot;Chunk size: &quot; + currentFs.getChunkSize()); UsbFile root = currentFs.getRootDirectory();//获取根目录 deviceName = currentFs.getVolumeLabel();//获取设备标签 mMainTvTitle.setText(deviceName);//设置标题 cFolder = root;//设置当前文件对象 addFile2List();//添加文件 &#125; catch (Exception e) &#123; e.printStackTrace(); setMsg(&quot;读取失败，异常：&quot; + e.getMessage()); &#125; &#125; private void redDeviceList() &#123; UsbManager usbManager = (UsbManager) getSystemService(Context.USB_SERVICE); //获取存储设备 storageDevices = UsbMassStorageDevice.getMassStorageDevices(this); PendingIntent pendingIntent = PendingIntent.getBroadcast(this, 0, new Intent(ACTION_USB_PERMISSION), 0); for (UsbMassStorageDevice device : storageDevices) &#123;//可能有几个 一般只有一个 因为大部分手机只有1个otg插口 if (usbManager.hasPermission(device.getUsbDevice())) &#123;//有就直接读取设备是否有权限 readDevice(device); &#125; else &#123;//没有就去发起意图申请 usbManager.requestPermission(device.getUsbDevice(), pendingIntent); //该代码执行后，系统弹出一个对话框， &#125; &#125; if (storageDevices.length == 0) setMsg(&quot;请插入U盘读取xxx&quot;); &#125; 当Android设备读取到U盘文件后，会显示出所有的文件夹及文件，因为我们只能对Excel文件进行操作处理，所以还要对用户选择的文件做判断处理 12345678910111213141516171819202122232425262728293031323334353637383940414243public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;//点击item 进入该目录 final UsbFile file = usbFiles.get(position); d(file.getName()); if (file.isDirectory()) &#123;//如果是文件夹 cFolder = file; mMainTvTitle.append(&quot;/&quot; + cFolder.getName()); addFile2List(); &#125; else &#123; if (file.getName().startsWith(&quot;._&quot;)) &#123; toastShort(&quot;请选择正确的Excel文件&quot;); return; &#125; if (file.getName().endsWith(&quot;.xls&quot;) || file.getName().endsWith(&quot;.xlsx&quot;)) &#123; //设置视图 dialog_wait.setMessage(&quot;正在读取&quot; + file.getName() + &quot;...&quot;); dialog_wait.show(); //执行线程 executorService.execute(new Runnable() &#123; @Override public void run() &#123; try &#123; Looper.prepare(); ExcelUtils.readFromExcel(file, mHandler); Looper.loop(); &#125; catch (final Exception e) &#123; e.printStackTrace(); runOnUiThread(new Runnable() &#123; @Override public void run() &#123; dialog_wait.dismiss(); &#125; &#125;); &#125; &#125; &#125;); &#125; else &#123; toastShort(&quot;请选择Excel文件进行操作&quot;); return; &#125; &#125;&#125; 接下来我们就需要对选择的Excel文件进行读取操作 static void readFromExcel(final UsbFile fileAbsolutePath, final Handler handler) throws IOException &#123;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273 new Thread(new Runnable() &#123; @Override public void run() &#123; /** * 读取Excel表中的所有数据 */ Workbook workbook = null; try &#123; workbook = getWeebWork(fileAbsolutePath); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; Logger.d(&quot;总表页数为：&quot; + workbook.getNumberOfSheets());// 获取表页数 Sheet sheet = workbook.getSheetAt(0); int sheetNum = workbook.getNumberOfSheets(); int sheetRows = sheet.getLastRowNum(); Logger.d(&quot;the num of sheets is &quot; + sheetNum); Logger.d(&quot;the name of sheet is &quot; + sheet.getSheetName()); Logger.d(&quot;total rows is 行=&quot; + sheetRows); // Sheet sheet = workbook.getSheetAt(1); int rownum = sheet.getLastRowNum();// 获取总行数 Logger.d(rownum); double sum = 0; List&lt;SubsidyEntity&gt; subsidyEntities = new ArrayList&lt;SubsidyEntity&gt;(); for (int i = 1; i &lt;= rownum; i++) &#123;//21 Row row = sheet.getRow(i); int columns = row.getLastCellNum();// 总列数 Logger.t(&quot;总列数&quot;).d(columns); for (int j = row.getFirstCellNum(); j &lt; row.getLastCellNum(); j++) &#123; Cell celldata = row.getCell(j); Logger.t(&quot;getColumnIndex&quot;).d(celldata.getColumnIndex()); Logger.t(&quot;cellData&quot;).d(celldata); SubsidyEntity subsidyEntity = new SubsidyEntity(); switch (celldata.getColumnIndex()) &#123; //证件号码 case 0:// subsidyEntity.setSubsidyIDNo(celldata.toString()); Logger.t(&quot;证件号码&quot;).d(celldata.toString()); break; //用户姓名 case 1:// subsidyEntity.setSubsidyName(celldata.toString()); Logger.t(&quot;用户姓名&quot;).d(celldata.toString()); break; //补贴金额 case 2: subsidyEntity.setSubsidyAmt(celldata.toString()); Logger.t(&quot;补贴金额&quot;).d(celldata.toString()); subsidyEntities.add(subsidyEntity); break; case 3: break; &#125; &#125; &#125; for (int j = 0; j &lt; subsidyEntities.size(); j++) &#123; Logger.d(subsidyEntities.size()); SubsidyEntity cellData = subsidyEntities.get(j); Logger.d(cellData.getSubsidyAmt()); sum += Double.valueOf(String.valueOf(cellData.getSubsidyAmt())); Logger.d(sum); &#125; Message msg = Message.obtain(); msg.arg1 = rownum; msg.arg2 = (int) sum; msg.what = Constants.MSG_GET_DATA_FROM_EXCEL_SUCCESS; handler.sendMessage(msg);// BigDecimal big = new BigDecimal(cellData.getNumericCellValue());//将科学计数法表示的数据转化为String类型// Logger.d(&quot;\t&quot; + String.valueOf(big)); &#125; &#125;).start(); &#125; 当传入Excel文件名后需要对当前文件是Excel 2003还是Excel 2007进行处理 1234567891011121314151617181920212223 * @param filename * @return * @throws IOException * @Title: getWeebWork * @Description: TODO(根据传入的文件名获取工作簿对象(Workbook)) */ public static Workbook getWeebWork(UsbFile filename) throws IOException &#123; Workbook workbook = null; if (null != filename) &#123; String fileType = filename.getName().substring(filename.getName().lastIndexOf(&quot;.&quot;), filename.getName().length());// FileInputStream fileStream = new FileInputStream(new File(filename)); if (&quot;.xls&quot;.equals(fileType.trim().toLowerCase())) &#123;// workbook = new HSSFWorkbook(new UsbFileInputStream(filename)); // or buffered (may increase performance)// workbook = new HSSFWorkbook(UsbFileStreamFactory.createBufferedOutputStream(filename, currentFs)); // if you don&apos;t have the current fs this should be fine as well workbook = new HSSFWorkbook(new BufferedInputStream(new UsbFileInputStream(filename))); &#125; else if (&quot;.xlsx&quot;.equals(fileType.trim().toLowerCase())) &#123; workbook = new XSSFWorkbook(new BufferedInputStream(new UsbFileInputStream(filename))); &#125; &#125; return workbook; &#125; 通过Handler消息处理机制，将我们在子线程获取到的Excel文件在主线程进行处理 class MyHandler extends Handler &#123;12345678910111213141516171819202122232425 //对Activity的弱引用 private final WeakReference&lt;SubsidyReleaseActivity&gt; mActivity; public MyHandler(SubsidyReleaseActivity activity) &#123; mActivity = new WeakReference&lt;SubsidyReleaseActivity&gt;(activity); &#125; @Override public void handleMessage(Message msg) &#123; SubsidyReleaseActivity activity = mActivity.get(); if (activity == null) &#123; super.handleMessage(msg); return; &#125; switch (msg.what) &#123; case Constants.MSG_GET_DATA_FROM_EXCEL_SUCCESS: subsidyTotalAmt = msg.arg2;//总行数 subsidyTotalCount = msg.arg1; dialog_wait.dismiss(); Logger.t(&quot;补助总笔数&quot;).d(subsidyTotalCount); Logger.t(&quot;补助总金额&quot;).d(subsidyTotalAmt); break; &#125; &#125;&#125; 最后我们在页面销毁时，注销广播，关闭USB设备 12345678910111213141516protected void onDestroy() &#123; super.onDestroy(); if (mUsbReceiver != null) &#123;//有注册就有注销 unregisterReceiver(mUsbReceiver); mUsbReceiver = null; &#125; if (sb != null) &#123; sb.unsubscribe(); &#125; if (storageDevices != null) &#123; for (UsbMassStorageDevice device : storageDevices) &#123; device.close(); storageDevices = null; &#125; &#125;&#125; Android 读取Assets 下的Excel文件 在我们做项目过程中，项目内测时，需要白名单控制，白名单实现的一种方案就是把用户的登录名电话号码作为白名单，如果不在白名单内则提示无法登录。此时，我们的白名单用户列表保存在Excel文件中，我们可以把Excel文件保存到Assets下进行读取。 首先需要把编辑好的Excel文件放到main目录下的assets下。（如果位置放错则读取不到）{http://ome4apvpf.bkt.clouddn.com/WX20170610-141311@2x.png} 然后通过子线程来读取Excel文件内容 static void getWhiteList(final Context context, final Handler handler) &#123;12345678910111213141516171819202122232425262728293031323334 new Thread(new Runnable() &#123; @Override public void run() &#123; ArrayList&lt;WhiteListInfo&gt; whitesList = new ArrayList&lt;WhiteListInfo&gt;(); AssetManager assetManager = context.getAssets(); try &#123; InputStream fileStream = new BufferedInputStream(assetManager.open(&quot;whitelist.xls&quot;)); Workbook workbook = Workbook.getWorkbook(fileStream); Sheet sheet = workbook.getSheet(0); int sheetNum = workbook.getNumberOfSheets(); int sheetRows = sheet.getRows(); int sheetColumns = sheet.getColumns(); Log.d(TAG, &quot;the num of sheets is &quot; + sheetNum); Log.d(TAG, &quot;the name of sheet is &quot; + sheet.getName()); Log.d(TAG, &quot;total rows is 行=&quot; + sheetRows); Log.d(TAG, &quot;total cols is 列=&quot; + sheetColumns); for (int i = 0; i &lt; sheetRows; i++) &#123; WhiteListInfo whitesListPhone = new WhiteListInfo(); whitesListPhone.setPhoneNo(sheet.getCell(0, i).getContents()); whitesList.add(whitesListPhone); &#125; workbook.close(); &#125; catch (Exception e) &#123; Log.e(TAG, &quot;read error=&quot; + e, e); &#125; Message msg = Message.obtain(); msg.obj = whitesList; msg.what = NetUrls.MSG_GET_WHITE_LIST_SUCC; // 发送这个消息到消息队列中 handler.sendMessage(msg); &#125; &#125;).start();&#125; 这里我们提前知道了Excel文件里面的内容，我这里只有一个电话号码列，所以要定义好相应的实体类 WhiteListInfo，将我们读取到的所以电话号码保存到List集合当中。 在主线程获取到我们读取的内容 void getWhiteListFromAsset() &#123;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 handler = new Handler() &#123; @Override public void handleMessage(Message msg) &#123; super.handleMessage(msg); // 请求用户信息成功 if (msg.what == NetUrls.MSG_GET_WHITE_LIST_SUCC) &#123; boolean isWhite = false; whitesList = (ArrayList&lt;WhiteListInfo&gt;) msg.obj; for (WhiteListInfo whiteNo : whitesList) &#123; LogUtil.i(&quot;白名单&quot;, whiteNo.getPhoneNo()); if (whiteNo.getPhoneNo().equals(currentMobileNo)) &#123; isWhite = true; &#125; &#125; dismissProgressDialog(); if (checkWhite &amp;&amp; !isWhite) &#123; new AlertDialog.Builder(MainActivity.this) .setTitle(&quot;提示&quot;) .setMessage(&quot;您的账号未在测试白名单内！&quot;) .setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which) &#123; finish(); &#125; &#125;) .setCancelable(false) .create() .show(); return; &#125; if (!isFirstRun) &#123; String preMobileNo = BankInfoUtils.getUserInfo(MainActivity.this).getMobileNo(); LogUtil.i(&quot;bankInfo:&quot;, currentMobileNo + &quot;;&quot; + preMobileNo); if (!currentMobileNo.equals(preMobileNo)) &#123; Intent intent = new Intent(MainActivity.this, ChangeAccountActivity.class); startActivity(intent); finish(); return; &#125; &#125; sharedPreferences.edit().putBoolean(&quot;isFirstRun&quot;, false).apply(); SharedPreferencesUtil.setPreferenceValue(MainActivity.this, &quot;cipherText&quot;, cipherText); initUI(); initData(); initView(); initEvent(); &#125; &#125; &#125;; HttpUtil.getWhiteList(this, handler);&#125; 注意事项：在读取Excel文件时有可能会遇到下面的错误jxl.read.biff.BiffException: Unable to recognize OLE stream这是因为因为文件是Excel2007，而jxl解析07会报上述异常，也就是jxl可以处理Excel2003。只需要原文件另存为2003文 件即可]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android自定义控件]]></title>
      <url>%2Fpost%2FAndroid%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6.html</url>
      <content type="text"><![CDATA[自定义控件 Android自身带的控件不能满足需求, 需要根据自己的需求定义控件. 自定义控件可以分为三大类型1. 组合已有的控件实现 优酷菜单 1. 在xml布局里摆放好, OK 2. 给指定控件添加点击事件. OK 3. 根据业务逻辑,执行动画(旋转动画: 补间动画). OK 4. 菜单按钮的截获. OK 轮播图广告 1. 让图片滑动起来(ViewPager), OK 2. 让图片和文字,指示器对应起来, OK 3. 让轮播器无限循环 向右无限循环 0 -&gt; 4 newPosition = position % 5 5 -&gt; 0 6 -&gt; 1 7 -&gt; 2 8 -&gt; 3 9 -&gt; 4 10 -&gt; 0 向左无限循环 设置到中间某个位置. 4. 轮播器自动轮询, OK 下拉选择框 Button或ImageButton等自带按钮功能的控件会抢夺所在Layout的焦点.导致其他区域点击不生效.在所在layout声明一个属性 android:descendantFocusability=&quot;blocksDescendants&quot; popupwindow获取焦点, 外部可点击 // 设置点击外部区域, 自动隐藏 popupWindow.setOutsideTouchable(true); // 外部可触摸 popupWindow.setBackgroundDrawable(new BitmapDrawable()); // 设置空的背景, 响应点击事件 popupWindow.setFocusable(true); //设置可获取焦点 2. 完全自定义控件.(继承View, ViewGroup) 自定义开关 写个类继承View, OK 拷贝包含包名的全路径到xml中, OK 界面中找到该控件, 设置初始信息, OK 根据需求绘制界面内容,OK 响应用户的触摸事件,OK 创建一个状态更新监听.OK // 1. 声明接口对象public interface OnSwitchStateUpdateListener{ // 状态回调, 把当前状态传出去 void onStateUpdate(boolean state);}// 2. 添加设置接口对象的方法, 外部进行调用public void setOnSwitchStateUpdateListener( OnSwitchStateUpdateListener onSwitchStateUpdateListener) { this.onSwitchStateUpdateListener = onSwitchStateUpdateListener; }// 3. 在合适的位置.执行接口的方法onSwitchStateUpdateListener.onStateUpdate(state); // 4. 界面/外部, 收到事件. 自定义属性 在attrs.xml声明节点declare-styleable &lt;attr name=&quot;switch_background&quot; format=&quot;reference&quot; /&gt; &lt;attr name=&quot;slide_button&quot; format=&quot;reference&quot; /&gt; &lt;attr name=&quot;switch_state&quot; format=&quot;boolean&quot; /&gt; R会自动创建变量 attr 3个变量styleable 一个int数组, 3个变量(保存位置) 在xml配置声明的属性/ 注意添加命名空间 xmlns:itheima=”http://schemas.android.com/apk/res/com.itheima74.toggleview“ itheima:switch_background=”@drawable/switch_background”itheima:slide_button=”@drawable/slide_button”itheima:switch_state=”false” 在构造函数中获取并使用 // 获取配置的自定义属性String namespace = “http://schemas.android.com/apk/res/com.itheima74.toggleview“;int switchBackgroundResource = attrs.getAttributeResourceValue(namespace , “switch_background”, -1); Android 的界面绘制流程 测量 摆放 绘制 measure -&gt; layout -&gt; draw | | | onMeasure -&gt; onLayout -&gt; onDraw 重写这些方法, 实现自定义控件 都在onResume()之后执行 View流程 onMeasure() (在这个方法里指定自己的宽高) -&gt; onDraw() (绘制自己的内容) ViewGroup流程 onMeasure() (指定自己的宽高, 所有子View的宽高)-&gt; onLayout() (摆放所有子View) -&gt; onDraw() (绘制内容) 侧滑面板 3. 继承已有的控件实现(扩展已有的功能) 包含下拉刷新功能的ListView]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android 读写CSV文件]]></title>
      <url>%2Fpost%2FAndroid%E8%AF%BB%E5%86%99CSV%E6%96%87%E4%BB%B6.html</url>
      <content type="text"><![CDATA[需求背景： 最近在做项目过程中，有以下需求：将用户的交易数据写入到本地文件中，并保存为.csv文件格式，以便导出时供用户查看。 何为.csv文件？ csv文件是以逗号分割的数据仓储，读取数据时从每一行中读取一条数据元祖，也就是一条数据，再用字符分割的方式获取表中的每一个数据项。 文件读写 首先来简单说下 Android 的文件读写。说到文件的存储，就要涉及到内部存储（internal storage）和外部存储（external storage）。 内部存储： 注意内部存储不是内存。内部存储位于系统中很特殊的一个位置，如果你想将文件存储于内部存储中，那么文件默认只能被你的应用访问到，且一个应用所创建的所有文件都在和应用包名相同的目录下。也就是说应用创建于内部存储的文件，与这个应用是关联起来的。当一个应用卸载之后，内部存储中的这些文件也被删除。从技术上来讲如果你在创建内部存储文件的时候将文件属性设置成可读，其他app能够访问自己应用的数据，前提是他知道你这个应用的包名，如果一个文件的属性是私有（private），那么即使知道包名其他应用也无法访问。 内部存储空间十分有限，因而显得可贵，另外，它也是系统本身和系统应用程序主要的数据存储所在地，一旦内部存储空间耗尽，手机也就无法使用了。所以对于内部存储空间，我们要尽量避免使用。Shared Preferences和SQLite数据库都是存储在内部存储空间上的。内部存储一般用Context来获取和操作。 getFilesDir()获取app的内部存储空间，相当于应用在内部存储上的根目录。 如果是要创建一个文件，如下： Android 为我们提供了一个简便方法’openFileOutput()’来读写应用在内部存储空间上的文件，下面是向文件中写入文件的例子： 总结一下文件相关操作，可以得出以下三个特点： 1 文件操作只需要向函数提供文件名，所以程序自己只需要维护文件名即可。 2 不用自己去创建文件对象和输入、输出流，提供文件名就可以返回File对象或输入输出流。 3 对于路径操作返回的都是文件对象。 外部存储最容易混淆的是外部存储，如果说 PC 上也要区分出外部存储和内部存储的话，那么自带的硬盘算是内部存储，U盘或者移动硬盘算是外部存储，因此我们很容易带着这样的理解去看待安卓手机，认为机身固有存储是内部存储，而扩展的 T 卡是外部存储。比如我们任务 16GB 版本的 Nexus 4有 16G 的内部存储，普通消费者可以这样理解，但是安卓的编程中不能，这 16GB 仍然是外部存储。 所有的安卓设备都有外部存储和内部存储，这两个名称来源于安卓的早期设备，那个时候的设备内部存储确实是固定的，而外部存储确实是可以像U盘一样移动的。但是在后来的设备中，很多中高端机器都将自己的机身存储扩展到了 8G 以上，他们将存储在概念上分成了”内部internal” 和”外部external” 两部分，但其实都在手机内部。所以不管安卓手机是否有可移动的sdcard，他们总是有外部存储和内部存储。最关键的是，我们都是通过相同的api来访问可移动的sdcard或者手机自带的存储（外部存储）。 外部存储中的文件是可以被用户或者其他应用程序修改的，有两种类型的文件（或者目录）： 公共文件Public files：文件是可以被自由访问，且文件的数据对其他应用或者用户来说都是由意义的，当应用被卸载之后，其卸载前创建的文件仍然保留。比如camera应用，生成的照片大家都能访问，而且camera不在了，照片仍然在。如果想在外存储上放公共文件你可以使用getExternalStoragePublicDirectory() 私有文件Private files：其实由于是外部存储的原因即是是这种类型的文件也能被其他程序访问，只不过一个应用私有的文件对其他应用其实是没有访问价值的（恶意程序除外）。外部存储上，应用私有文件的价值在于卸载之后，这些文件也会被删除。类似于内部存储。创建应用私有文件的方法是Context.getExternalFilesDir()。所有应用程序的外部存储的私有文件都放在根目录的Android/data/下，目录形式为/Android/data// getFilesDir，getExternalFilesDir，getExternalStorageDirectory ，getExternalStoragePublicDirectory最后为了弄清楚getFilesDir，getExternalFilesDir，getExternalStorageDirectory，getExternalStoragePublicDirectory等android文件操作方法，我将这些方法的执行结果打印出来，看看到底路径是啥样，在activity中执行以下代码：在log中看到如下结果： .csv 文件的读写 1 将.csv文件写入到内存项目需求是在进行充值交易时，为了看到交易前与交易后数据是否成功，所以在交易前先将一些可知的请求参数写入文件当中，首先在主 Activity 中编写以下代码:然后将表头数据写入’buffer.append(“交易批次,交易序号,客户名,身份证号,卡号,交易流水,交易原金额,交易金额,交易后金额,交易时间,交易是否成功,是否超时\r\n”);’等交易成功后，再将请求响应获得的数据，追加到上面写入的文件末尾，代码如下：至此，我们已经将.csv格式的文件写入到本地，预览效果如下： 2 读完.csv文件显示到界面上用户在APP交易明细查询中需要显示出文件中保存的数据，所以我们还需要将保存到.csv文件中的内容显示到界面上。代码如下:在读取.csv格式的文件中，用到了第三方解析工具javacsv.jar，可以在网上自行搜索下载到，工具类代码如下: 参考:「android中的文件操作详解以及内部存储和外部存储」http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2013/0923/1557.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Mac安装Homebrew]]></title>
      <url>%2Fpost%2FMac%E5%AE%89%E8%A3%85Homebrew.html</url>
      <content type="text"><![CDATA[Mac安装Homebrewbrew 全称Homebrew 是Mac OSX上的软件包管理工具Homebrew 安装和卸载工具 只用一行命令就能完成官方地址: http://brew.sh/index.htmlmac 自带ruby打开命令行 terminal输入 : ruby -version命令行输出:1) 安装命令 ruby -e “$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)”假如已经安装了 输入如下命令 ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”命令行输出:2) brew 使用方法命令行 输入: brew输出:3) 安装工具举个栗子: Mongodb 这个工具输入命令: brew install Mongodb如图:4) 卸载拿上面的栗子: Mongodb 工具输入命令 brew uninstall Mongodb5) 工具安装的目录Homebrew 会将套件安装到独立目录，并将文件软链接至/usr/local 。 $ cd /usr/local $ find Cellar Cellar/wget/1.16.1 Cellar/wget/1.16.1/bin/wget Cellar/wget/1.16.1/share/man/man1/wget.1 $ ls -l bin bin/wget -&gt; ../Cellar/wget/1.16.1/bin/wgetHomebrew 的所有文件均会被安装到预定义目录下，所以无需担心 Homebrew 的安装位置。6) 其他命令brew list 列出已安装的软件brew update 更新brewbrew home 用浏览器打开brew的官方网站brew info 显示软件信息brew deps 显示包依赖更多命令请看: https://git.io/brew-docs7)安装过程中遇到的问题brew安装应用的时候碰上“curl: (7) couldn’t connect to host 的问题”,可以使用代理，让curl通过代理来访问。编辑$HOME/.curlrc文件，增加“–socks5 127.0.0.1:1080”即可（替换成你自己的代理），这样你在brew install安装的时候，相应curl就会通过socks代理访问，从而成功下载完成安装。方便简单，就是你需要自己设置一个socks代理。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2Fpost%2Fhello-world.html</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
